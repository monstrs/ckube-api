//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ConfigurationSpecType = {
  'CONTROLLER' : 1,
  'SERVICE' : 2
};
ValidationError = module.exports.ValidationError = function(args) {
  this.field = null;
  this.message = null;
  if (args) {
    if (args.field !== undefined) {
      this.field = args.field;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
ValidationError.prototype = {};
ValidationError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValidationError.prototype.write = function(output) {
  output.writeStructBegin('ValidationError');
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 1);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ValidationException = module.exports.ValidationException = function(args) {
  Thrift.TException.call(this, "ValidationException")
  this.name = "ValidationException"
  this.code = null;
  this.message = null;
  this.errors = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.errors !== undefined) {
      this.errors = args.errors;
    }
  }
};
Thrift.inherits(ValidationException, Thrift.TException);
ValidationException.prototype.name = 'ValidationException';
ValidationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.errors = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ValidationError();
          elem6.read(input);
          this.errors.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValidationException.prototype.write = function(output) {
  output.writeStructBegin('ValidationException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.errors.length);
    for (var iter7 in this.errors)
    {
      if (this.errors.hasOwnProperty(iter7))
      {
        iter7 = this.errors[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Project = module.exports.Project = function(args) {
  this._id = null;
  this.name = null;
  this.code = null;
  this.description = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
  }
};
Project.prototype = {};
Project.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Project.prototype.write = function(output) {
  output.writeStructBegin('Project');
  if (this._id !== null && this._id !== undefined) {
    output.writeFieldBegin('_id', Thrift.Type.STRING, 1);
    output.writeString(this._id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 4);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConfigurationSpec = module.exports.ConfigurationSpec = function(args) {
  this._id = null;
  this.type = null;
  this.content = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.content !== undefined) {
      this.content = args.content;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field content is unset!');
    }
  }
};
ConfigurationSpec.prototype = {};
ConfigurationSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigurationSpec.prototype.write = function(output) {
  output.writeStructBegin('ConfigurationSpec');
  if (this._id !== null && this._id !== undefined) {
    output.writeFieldBegin('_id', Thrift.Type.STRING, 1);
    output.writeString(this._id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Configuration = module.exports.Configuration = function(args) {
  this._id = null;
  this.name = null;
  this.project = null;
  this.expression = null;
  this.specs = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.project !== undefined) {
      this.project = args.project;
    }
    if (args.expression !== undefined) {
      this.expression = args.expression;
    }
    if (args.specs !== undefined) {
      this.specs = args.specs;
    }
  }
};
Configuration.prototype = {};
Configuration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.Project();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.expression = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.specs = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.ConfigurationSpec();
          elem14.read(input);
          this.specs.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Configuration.prototype.write = function(output) {
  output.writeStructBegin('Configuration');
  if (this._id !== null && this._id !== undefined) {
    output.writeFieldBegin('_id', Thrift.Type.STRING, 1);
    output.writeString(this._id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 3);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.expression !== null && this.expression !== undefined) {
    output.writeFieldBegin('expression', Thrift.Type.STRING, 4);
    output.writeString(this.expression);
    output.writeFieldEnd();
  }
  if (this.specs !== null && this.specs !== undefined) {
    output.writeFieldBegin('specs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.specs.length);
    for (var iter15 in this.specs)
    {
      if (this.specs.hasOwnProperty(iter15))
      {
        iter15 = this.specs[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Deployment = module.exports.Deployment = function(args) {
  this._id = null;
  this.configuration = null;
  this.params = null;
  this.specs = null;
  if (args) {
    if (args._id !== undefined) {
      this._id = args._id;
    }
    if (args.configuration !== undefined) {
      this.configuration = args.configuration;
    }
    if (args.params !== undefined) {
      this.params = args.params;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field params is unset!');
    }
    if (args.specs !== undefined) {
      this.specs = args.specs;
    }
  }
};
Deployment.prototype = {};
Deployment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.configuration = new ttypes.Configuration();
        this.configuration.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.params = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.specs = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.ConfigurationSpec();
          elem22.read(input);
          this.specs.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Deployment.prototype.write = function(output) {
  output.writeStructBegin('Deployment');
  if (this._id !== null && this._id !== undefined) {
    output.writeFieldBegin('_id', Thrift.Type.STRING, 1);
    output.writeString(this._id);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.STRUCT, 2);
    this.configuration.write(output);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRING, 3);
    output.writeString(this.params);
    output.writeFieldEnd();
  }
  if (this.specs !== null && this.specs !== undefined) {
    output.writeFieldBegin('specs', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.specs.length);
    for (var iter23 in this.specs)
    {
      if (this.specs.hasOwnProperty(iter23))
      {
        iter23 = this.specs[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

